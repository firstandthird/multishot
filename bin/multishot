#!/usr/bin/env node

var fs = require('fs');
var version = JSON.parse(fs.readFileSync(__dirname + '/../package.json', 'utf8')).version;
var Screenshot = require('../').Screenshot;
var optimist = require('optimist');
var ProgressBar = require('progress');

var argv = optimist
    .usage('multishot '+version+'\nUsage: $0 [opts]')
    .describe('o', 'Output directory')
    .demand('o')
    .describe('t', 'Temp directory. Note: This directory will be truncated.')
    .default('t', '/tmp/multishot/')
    .describe('u', 'List of urls to use')
    .describe('f', 'File containing list of urls (One url per line).')
    .argv;

if(argv.h || argv.help) {
  optimist.showHelp();
  process.exit(1);
}

var urls = [];
var options = {};

if(argv.u) {
  urls = argv.u;
  if(typeof urls === "string") {
    urls = [argv.u];
  }
} else if(argv.f) {
  urls = fs.readFileSync(argv.f, 'utf8');

  if(!urls) {
    console.log('Error reading file');
    process.exit(1);
  }

  urls = urls.split('\n');
}

var bar = new ProgressBar(' Rendering images [:bar] :percent :etas', {
  complete: '=',
  incomplete: ' ',
  width: 50,
  total: urls.length + 1
});

options.output = argv.o;
options.temp = argv.t;

var shot = new Screenshot(urls, options);

shot.on('progress', function() {
  bar.tick();
});

shot.on('complete', function(file) {
  console.log(' ');
  console.log('Done. File saved to: ' + file);
});