#!/usr/bin/env node

var fs = require('fs');
var version = JSON.parse(fs.readFileSync(__dirname + '/../package.json', 'utf8')).version;
var Screenshot = require('../').Screenshot;
var Presets = require('../').Presets;
var optimist = require('optimist');

var argv = optimist
    .usage('multishot '+version+'\nUsage: $0 [opts]')
    .describe('o', 'Output directory')
    .default('o', process.cwd())
    .describe('t', 'Temp directory. Note: This directory will be truncated.')
    .default('t', '/tmp/multishot/')
    .describe('u', 'List of urls to use.')
    .describe('f', 'File containing list of urls (One url per line).')
    .describe('p', 'Prefix for output file')
    .describe('d', 'Device Profile. Pass with no option to see available presets.')
    .describe('w', 'Sets viewport width.')
    .describe('h', 'Sets viewport height.')
    .describe('a', 'Sets user agent.')
    .describe('tpl', 'Template file.')
    .argv;

if(argv.h || argv.help) {
  optimist.showHelp();
  process.exit(1);
}

var urls = [];
var grouped = [];
var options = {};
var lastGroup = 'Default';

if(argv.d === true) {
  console.log('Preset devices:', Object.keys(Presets).join(', '));
  process.exit(1);
}

if(argv.u) {
  urls = argv.u;
  if(typeof urls === "string") {
    urls = [argv.u];
  }
  grouped = urls;
} else if(argv.f) {
  urls = fs.readFileSync(argv.f, 'utf8');

  if(!urls) {
    console.log('Error reading file');
    process.exit(1);
  }

  urls = urls.split('\n');

  for(var i = 0, c = urls.length; i < c; i++) {
    if(!urls[i].length) continue;

    if(urls[i].indexOf('http') === -1) {
      lastGroup = urls[i];
      continue;
    }

    grouped.push({
      group: lastGroup,
      url: urls[i]
    });
  }
}

options.output = argv.o;
options.temp = argv.t;
options.additional = {};
options.prefix = argv.p;

if(argv.d && Presets[argv.d]) {
  for(var pkey in Presets[argv.d]) {
    options.additional[pkey] = Presets[argv.d][pkey];
  }
}

var shot = new Screenshot(grouped, options, function(err) {
  console.log(' ');
  console.log('Error: ' + err);
});

shot.on('complete', function(file) {
  console.log(' ');
  console.log('Done. File saved to: ' + file);
});

shot.on('err', function(err) {
  console.log('Error: ' + err);
});

shot.on('start', function(){
  console.log('Capturing screenshots. This might take a while.');
});

shot.start();
